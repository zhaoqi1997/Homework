<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--开启注解扫描-->
    <context:component-scan base-package="com.zq">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--引入小配置文件-->
    <context:property-placeholder location="classpath:config/jdbc.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="minIdle" value="${minIdle}"/>
    </bean>
    <!--创建sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--给实体类起别名-->
        <property name="typeAliasesPackage" value="com.zq.entity"/>
        <!--引入mybatis-config.xml-->
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <!--引入数据源-->
        <property name="dataSource"  ref="dataSource"/>
        <!--确定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
    </bean>
    <!--创建接口实现类对象-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--引入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--引入接口的位置-->
        <property name="basePackage" value="com.zq.dao"/>
    </bean>

    <!--创建事务管理对象-->
    <bean id="transAction" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--依赖数据源-->
        <property name="dataSource"  ref="dataSource"/>
    </bean>

<!--    开启事务扫描注解-->
    <tx:annotation-driven transaction-manager="transAction"/>


<!--&lt;!&ndash;    采取声明式管理事务&ndash;&gt;
    &lt;!&ndash;因为要采用aop的思想管理事务，所以肯定离不开通知advice MethodBeforeAdvice
    AfterReturningAdvice MethodInterceptorAdvice ThrowsAdvice&ndash;&gt;
    <tx:advice id="advice" transaction-manager="transAction">
        <tx:attributes>
            &lt;!&ndash;name&ndash;&gt;
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash;aop编程&ndash;&gt;
    <aop:config>
        &lt;!&ndash;定义切点
          within:(com.zq.service..*)
          args(java.lang.String,..)
        &ndash;&gt;
        <aop:pointcut id="pct" expression="execution(* com.zq.service..*.* (..))"/>
        &lt;!&ndash;编织&ndash;&gt;
        <aop:advisor advice-ref="advice" pointcut-ref="pct"/>
    </aop:config>-->
</beans>